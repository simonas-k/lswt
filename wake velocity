import math
import matplotlib.pyplot as plt

# Path to the data file
FILE_PATH = "raw_raw_2D_retest2.txt"
POSITIONS_FILE = "wake rake locations.txt"  # New text file with x positions

Vinf = 19.515  # Freestream velocity (m/s)

def load_data(file_path):
    """Load the data from the text file and parse it into lists."""
    with open(file_path, 'r') as f:
        lines = f.readlines()
    
    # Skip the header (first two lines) and read data
    data_lines = lines[2:]
    data = []

    for line in data_lines:
        # Split the line by whitespace and convert to appropriate types
        parts = line.split()
        run_nr = int(parts[0])
        alpha = float(parts[2])
        rho = float(parts[7])
        Pinf = float(parts[97])
        pressures = [float(p) for p in parts[57:104]]
        data.append((run_nr, alpha, rho, Pinf, pressures))

    return data

def load_positions(file_path):
    """Load wake positions from the text file."""
    with open(file_path, 'r') as f:
        lines = f.readlines()
    
    # Convert each line to a float representing percentage of the chord
    positions = [float(line.strip()) for line in lines]
    
    return positions

def calculate_velocity(data, selected_run_nr):
    """Calculate the wake velocity profile for a specific run number."""
    for run_nr, alpha, rho, Pinf, pressures in data:
        if run_nr == selected_run_nr:
            # Calculate velocity using Bernoulli's equation with a check for non-negative values
            velocities = []
            for p in pressures:
                delta_p = Pinf - p
                if Vinf**2 + (2 * delta_p) / rho >= 0:
                    velocities.append(math.sqrt(Vinf**2 + (2 * delta_p) / rho))
                else:
                    velocities.append(0)  # Set velocity to 0 if expression inside sqrt is negative

            return velocities, alpha

    print(f"No data found for Run_nr {selected_run_nr}")
    return None, None

def plot_velocity_profile(positions, velocities, alpha):
    """Plot the velocity distribution as a single line over the wake profile."""
    # Create the plot
    plt.figure(figsize=(10, 6))

    # Plot the velocities over the chordwise positions as a single line
    plt.plot(positions, velocities, marker='o', linestyle='-', color='blue', label='Velocity Distribution')

    # Add labels, title, grid, and legend
    plt.xlabel('Total wake rake probe locations (mm)')
    plt.ylabel('Velocity (m/s)')
    plt.title(f'Velocity Distribution for α = {alpha}°')
    plt.grid(True)
    plt.legend()

    # Display the plot
    plt.show()

def main():
    # Load the data
    data = load_data(FILE_PATH)

    # Load the chordwise positions
    positions = load_positions(POSITIONS_FILE)

    # Select the run number (change this to analyze different angles)
    selected_run_nr = 52  # Example run number

    # Calculate velocity profile
    velocities, alpha = calculate_velocity(data, selected_run_nr)

    if velocities is not None:
        # Plot the velocity profile
        plot_velocity_profile(positions, velocities, alpha)

if __name__ == "__main__":
    main()
